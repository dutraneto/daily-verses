{"version":3,"sources":["Card.jsx","CardDeck.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","img","alt","reference","verse","day","CardDeck","state","cards","now","Date","start","getFullYear","diff","Math","floor","apiHeaders","headers","Accept","axios","get","response","data","results","map","item","get30First","slice","this","setState","verses","index","key","image","url","human_reference","text","height","offset","once","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAoBeA,G,MAjBF,SAACC,GACZ,OACE,yBAAKC,UAAU,+DACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eAAeC,IAAKF,EAAMG,IAAKC,IAAI,aAClD,yBAAKH,UAAU,aACb,wBAAIA,UAAU,cAAcD,EAAMK,WAClC,uBAAGJ,UAAU,aAAaD,EAAMM,QAElC,yBAAKL,UAAU,uBACb,2BAAOA,UAAU,kCAAjB,OAAuDD,EAAMO,U,kCC+ExDC,E,YAtFb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KACDS,MAAQ,CACXC,MAAO,IAHQ,E,kFAQjB,IAAIC,EAAM,IAAIC,KACVC,EAAQ,IAAID,KAAKD,EAAIG,cAAc,EAAE,GACrCC,EAAOJ,EAAME,EAIjB,OADUG,KAAKC,MAAMF,EADR,S,+OAiCC,8BACRG,EAAa,CACjBC,QAAS,CACP,+BAHU,8BAIV,kBAAmB,KACnBC,OAAQ,qB,SAGWC,IAAMC,I,yEAASJ,G,OAAhCK,E,OACAC,EAAOD,EAASC,KAChBC,EAAUD,EAAKA,KAAKE,IAAI,SAAAC,GAAI,OAAIA,IAChCC,EAAaH,EAAQI,MAAM,EAAG,IAEpCC,KAAKC,SAAS,CACZrB,MAAOkB,I,oIAKT,IAAMI,EAASF,KAAKrB,MAAMC,MAAMgB,IAAI,SAACpB,EAAO2B,GAC1C,OACE,kBAAC,EAAD,CACEC,IAAKD,EACL9B,IAAKG,EAAM6B,MAAMC,IACjB/B,UAAWC,EAAMA,MAAM+B,gBACvB/B,MAAOA,EAAMA,MAAMgC,KACnB/B,IAAKD,EAAMC,QAKjB,OACE,kBAAC,IAAD,CAAUgC,OAAQ,IAAKC,OAAQ,IAAKC,MAAI,GACtC,yBAAKxC,UAAU,aACV+B,Q,GAhFUU,aCmBRC,MApBf,WACE,OACE,6BACE,wBAAI1C,UAAU,yBAAd,sBAGA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,SAIN,4BAAQA,UAAU,sDAChB,uBAAGA,UAAU,qCAAb,qDCNY2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.33211d2e.chunk.js","sourcesContent":["import React from 'react'\nimport './Card.css'\n\nconst Card = (props) => {\n  return (\n    <div className=\"col-sm-12 col-md-6 col-lg-4 d-flex align-items-stretch pb-5\">\n      <div className=\"card shadow\">\n        <img className=\"card-img-top\" src={props.img} alt=\"Card cap\" />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{props.reference}</h5>\n          <p className=\"card-text\">{props.verse}</p>\n        </div>\n        <div className=\"card-footer bg-dark\">\n          <small className=\"text-center d-block text-white\">Day {props.day}</small>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React, { Component } from 'react'\nimport Card from './Card'\nimport axios from 'axios'\nimport LazyLoad from 'react-lazyload'\n\nclass CardDeck extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      cards: []\n    }\n  }\n\n  getTheDayOfTheYear() {\n    let now = new Date()\n    let start = new Date(now.getFullYear(),0,0)\n    let diff = now - start\n    // milliseconds * sec * min * hours\n    let oneDay = 1000 * 60 * 60 * 24\n    let day = Math.floor(diff / oneDay)\n    return day\n  }\n\n  // to get one single verse\n  // async componentDidMount() {\n  //   const url = `https://developers.youversionapi.com/1.0/verse_of_the_day/${this.getTheDayOfTheYear()}?version_id=1`\n  //   const token = '1XqvcU4uQZ6-yMZ8Tv9RXoeDSCE'\n  //   const apiHeaders = {\n  //     headers: {\n  //       'X-YouVersion-Developer-Token': token,\n  //       'Accept-Language': 'en',\n  //       Accept: 'application/json',\n  //     }\n  //   }\n  //   let response = await axios.get(url, apiHeaders)\n  //   let data = response.data\n  //   console.log(data)\n  //   this.setState({\n  //     cards: [\n  //       {\n  //         img: data.image.url,\n  //         verse: data.verse.text,\n  //         ref: data.verse.human_reference,\n  //         attr: data.image.attribution\n\n  //       }\n  //     ]\n  //   })\n\n  async componentDidMount() {\n    const url = `https://developers.youversionapi.com/1.0/verse_of_the_day?version_id=1`\n    const token = '1XqvcU4uQZ6-yMZ8Tv9RXoeDSCE'\n    const apiHeaders = {\n      headers: {\n        'X-YouVersion-Developer-Token': token,\n        'Accept-Language': 'en',\n        Accept: 'application/json',\n      }\n    }\n    const response = await axios.get(url, apiHeaders)\n    const data = response.data\n    const results = data.data.map(item => item)\n    const get30First = results.slice(0, 30)\n    // console.log(data)\n    this.setState({\n      cards: get30First\n    })\n  }\n\n  render() {\n    const verses = this.state.cards.map((verse, index) => {\n      return (\n        <Card\n          key={index}\n          img={verse.image.url}\n          reference={verse.verse.human_reference}\n          verse={verse.verse.text}\n          day={verse.day}\n        />\n      )\n    })\n\n    return(\n      <LazyLoad height={200} offset={100} once>\n        <div className=\"card-deck\">\n            {verses}\n        </div>\n      </LazyLoad>\n    )\n  }\n}\n\nexport default CardDeck\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport CardDeck from './CardDeck'\n\nfunction App() {\n  return (\n    <div>\n      <h1 className=\"text-center display-1\">\n        Daily Bible Verses\n      </h1>\n      <div className=\"my-5\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <CardDeck />\n          </div>\n        </div>\n      </div>\n      <footer className=\"footer text-center bg-dark position-absolute w-100\">\n        <p className=\"text-white my-auto py-3 display-5\">Jos√© Dutra - Front-End Web Developer - 2019</p>\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}